<?php
/**
 * A specific logger interface specification.
 *
 * @package calmPress
 * @since 1.0.0
 */

declare(strict_types=1);

namespace calmpress\logger;

/**
 * The specification of a logger interface.
 *
 * @since 1.0.0
 */
interface Logger {
	/**
	 * Log a message.
	 * 
	 * All information that deemed to be useful may be passed but it is up to
	 * the implementation to decide how to use it.
	 *
	 * @param string $message     The message to log.
	 * @param string $file_name   The name of the file in which the log generated.
	 * @param int    $line_number The line number in which the log generated.
	 * @param int    $user_id     The user id of the logged in user. A value of -1
	 *                            indicates that the user id should not be logged.
	 * @param string $stack_trace The stack trace to attach, best if in the format
	 *                            generated by debug_print_backtrace
	 *                            @see https://www.php.net/manual/en/function.debug-print-backtrace.php
	 * @param string $request     Information about the http request being handled.
	 */
	public function log_message(
		string $message,
		string $file_name = '',
		int $line_number = -1,
		int $user_id = -1,
		string $stack_trace = '',
		string $request = ''
		): void;
	
	/**
	 * Remove old log entries. Provides a way to remove log entries that
	 * are unlikely to be useful and might just be in the way of getting to
	 * a useful log entry and/or hurt the performance of the loggin medium.
	 *
	 * Implementations can use fuzzy logic and delete somewhat more or less
	 * entries than strictly asked for if it improves performance or reduce
	 * code complexity
	 *
	 * @param int $days_to_keep The number of days a log should be kept, any log
	 *                          older than that is removed.
	 *
	 * @since 1.0.0
	 */
	public function purge_old_log_entries( int $days_to_keep ) : void;
}